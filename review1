（1）ES5/ES6 的继承除了写法以外还有什么区别？
1.class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。
2.class 声明内部会启用严格模式。(引用一个未声明的变量报错)
3.class 的所有方法（包括静态方法和实例方法）都是不可枚举的。
4.class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有[[construct]]，不能使用 new 来调用。
5.必须使用 new 调用 class。
6.class 内部无法重写类名。

（2）setTimeout、Promise、Async/Await 的区别
考察这三者在事件循环中的区别，事件循环中分为宏任务队列和微任务队列。
其中settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行；
promise.then里的回调函数会放到相应宏任务的微任务队列里，等宏任务里面的同步代码执行完再执行；async函数表示函数里面可能会有异步方法，await后面跟一个表达式，async方法执行时，
遇到await会立即执行表达式，然后把表达式后面的代码放到微任务队列里，让出执行栈让同步代码先执行。

（3）Async/Await 如何通过同步的方式实现异步
一个函数如果加上 async ，那么该函数就会返回一个 Promise。
await 只能在 async 函数中使用，可以把 async 看成将函数返回值使用 Promise.resolve() 包裹了下。
async 和 await 相比直接使用 Promise 来说，优势在于处理 then 的调用链，能够更清晰准确的写出代码。缺点在于滥用 await 可能会导致性能问题，
因为 await 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。
Async/Await就是一个自执行的generate函数。利用generate函数的特性把异步的代码写成“同步”的形式

（4）new运算符都做了哪些操作呢？
1、创建了一个新对象（是Object类型的数据）
2、将this指向新对象
3、将创建的对象的原型指向构造函数的原型
4、返回一个对象（如果构造函数本身有返回值且是对象类型，就返回本身的返回值，如果没有才返回新对象）

下面就写一个实现new功能的函数：

function mynew () {
     // 1、创建一个新对象
     const obj = Object.create({});    // 也可以写成 const obj = {}
     // 2、将this指向该对象
     let Fn = [].shift.call(arguments);    // 把构造函数分离出来
     let returnObj = Fn.apply(obj, arguments);     // 通过apply将this指向由Fn变为obj
     
     // 3、将新对象的原型指向构造函数的原型
     obj.__proto__ = Fn.prototype
     
    // 4、返回对象（如果构造函数有返回对象，那么就返回构造函数的对象，如果没有就返回新对象）
    return Object.prototype.toString.call(returnObj) == '[object Object]' ? returnObj : obj;
}


function _new2(fn, ...arg) {
   // 这一句话只是构造了一个对象，这个对象的__proto__=== fn.prototype
   var obj = Object.create(fn.prototype)
   // 并没有给这个对象赋值，将fn的this对象设置为obj
   // call 是列表， apply是数组
   const ret = fn.call(obj, ...arg) 
   // 为啥这里需要判断一下ret，根据new的定义，如果构造函数没有返回一个对象，那么返回this对象，this当前就是obj
   return ret instanceof Object ? ret : obj 
};function Person(age){this.age=age;};var s=_new2(Person,10);console.log(s);

（5）简单讲解一下 http2 的多路复用
HTTP2采用二进制格式传输，取代了HTTP1.x的文本格式，二进制格式解析更高效。
多路复用代替了HTTP1.x的序列和阻塞机制，所有的相同域名请求都通过同一个TCP连接并发完成。在HTTP1.x中，并发多个请求需要多个TCP连接，浏览器为了控制资源会有6-8个TCP连接都限制。
HTTP2中

同域名下所有通信都在单个连接上完成，消除了因多个 TCP 连接而带来的延时和内存消耗。
单个连接上可以并行交错的请求和响应，之间互不干扰

（6）谈谈你对 TCP 三次握手和四次挥手的理解
三次握手

在TCP/IP协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。

（1）第一次握手：Client将同步标志位SYN设置为1，随机生成一个序列号x，并将数据包发送给Server。此时Client进入SYN_SENT状态，等待Server确认。
（2）第二次握手：Server接收到数据包之后，由SYN=1得知这是Client请求建立连接。Server将同步标志位SYN设置为1，将确认标志位ACK设置为1，ack = x+1，随机生成一个序列号y，并将数据包发送给Client确认请求。此时Server进入SYN_RCVD状态。（半连接列队）
（3）第三次握手：Client接收到数据包后，确认ack是否为x+1，如果是则将确认标志位ACK设置为1，ack=y+1，发送给Server。此时Client状态为ESTABLISHED。Server接收到数据包之后检查ack是否为y+1，如果是则成功建立连接，Serve状态进入ESTABLISHED，完成三次握手。（全连接列队）

ISN：即Initial Sequence Number（初始序列号），在三次握手的过程当中，双方会用过SYN报文来交换彼此的 ISN。
ISN 并不是一个固定的值，而是每 4 ms 加一，溢出则回到 0，这个算法使得猜测 ISN 变得很困难。那为什么要这么做？
如果 ISN 被攻击者预测到，要知道源 IP 和源端口号都是很容易伪造的，当攻击者猜测 ISN 之后，直接伪造一个 RST 后，就可以强制连接关闭的，这是非常危险的。
而动态增长的 ISN 大大提高了猜测 ISN 的难度。

四次挥手
（1）第一次挥手：Client向Server发送FIN标志，用于关闭Client到Server的数据传送，并发送序列号a，进入FIN_WAIT_1状态。这表示Client告诉Server我已经没有数据要发给你了。
（2）第二次挥手：Server接收到FIN标志后，发送一个ack=a+1，告知Client它已经接收到了关闭请求，进入CLOSE_WAIT状态。Clinet接收到回应后进入FIN_WAIT_2状态。
（3）第三次挥手：Server发送FIN标志，用于关闭Server到Client的数据传送，并发出序列号b，进入LAST_ACK状态。这表示Server告诉Client我也没有数据要发送给你了。
（4）第四次挥手：Client接收到FIN标志后，发送一个ack=b+1，告知Server它已经接收到请求关闭，进入TIME_WAIT状态。Server接收到回应进入CLOSED状态。等待2MSL后，Client依然没有收到其他回复，则也进入CLOSED。

（7）A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态
A侧的TCP链路状态在未发送任何数据的情况下与等待的时间相关，如果在多个超时值范围以内那么状态为<established>;如果触发了某一个超时的情况那么视情况的不同会有不同的改变。

一般情况下不管是KeepAlive超时还是内核超时，只要出现超时，那么必然会抛出异常，只是这个异常截获的时机会因编码方式的差异而有所不同。（同步异步IO，以及有无使用select、poll、epoll等IO多路复用机制）

（8）React 中 setState 什么时候是同步的，什么时候是异步的？
在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state 。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。

原因： 在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，有一个函数batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state。

注意： setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。
由React控制的事件处理程序，以及生命周期函数调用setState不会同步更新state 。
React控制之外的事件中调用setState是同步更新的。比如原生js绑定的事件，setTimeout/setInterval等。
