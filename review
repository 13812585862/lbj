（1）React/Vue项目时为什么要在列表组件中写key，其作用是什么？
  key是给每一个vnode的唯一id，可以依赖key，更准确，更快地拿到oldVnode中对应的vnode节点1.因为带key就不是就地复用了，在someNode函数 a.key === b.key 对比中可以避免就地复用的情况，所以会更加准确。
2.利用key的唯一性生成map对象来获取对应节点，比遍历方式更快。不带key性能更快，但是会造成表单数据错乱，带key是唯一的，则不会。总结，vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点，key在diff算法中起着不可比拟的作用。说到底，key的作用就是更新组件时判断两个节点是否相同。相同就复用，不相同就删除旧的创建新的。
（2）什么是防抖和节流？有什么区别？如何实现？
  1函数节流是：在固定的时间内触发事件，每隔n秒触发一次  高频触发只在固定时间执行一次
  2函数防抖是：当你频繁触发后，n秒内只执行一次         多次输入input值只看最后一次
  2：function debounce(fn) {
    let timeout = null; // 创建一个标记用来存放定时器的返回值
    return function () {
        clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉
        timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数
            fn.apply(this, arguments);
        }, 500);
    };
}
function sayHi() {
    console.log('防抖成功');
}
let box = document.getElementById('box')
box.addEventListener('click', debounce(sayHi))
  1：function throttle(fn) {
    let canRun = true; // 通过闭包保存一个标记
    return function () {
        if (!canRun) return; // 在函数开头判断标记是否为true，不为true则return
        canRun = false; // 立即设置为false
        setTimeout(() => { // 将外部传入的函数的执行放在setTimeout中
            fn.apply(this, arguments);
            // 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉
            canRun = true;
        }, 500);
    };
}
function sayHi(e) {
    console.log('节流');
}
window.addEventListener('resize', throttle(sayHi));
（3）es6中set,map,WeakSet,Weakmap的区别和用法
ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。可以存储不同类型的任何数据，向 Set 加入值的时候，不会发生类型转换，两个空对象不相等，所以它们被视为两个值，两个NaN是相等。
Array.from方法可以将 Set 结构转为数组。这就提供了去除数组重复成员的另一种方法。数组的map和filter方法也可以间接用于 Set 。
let a = new Set([1, 2, 3]);
let b = new Set([4, 3, 2]);
// 并集
let union = new Set([...a, ...b]);
// Set {1, 2, 3, 4} 
// 交集
let intersect = new Set([...a].filter(x => b.has(x)));
// set {2, 3}
// 差集
let difference = new Set([...a].filter(x => !b.has(x)));
// Set {1}

WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。

首先，WeakSet 的成员只能是对象，而不能是其他类型的值。其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。不会出现内存泄漏。
由于上面这个特点，WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。
这些特点同样适用于本章后面要介绍的 WeakMap 结构。

Map
JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。但是Map“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键.
注意：
const map = new Map();
 
map.set(['a'], 555);
map.get(['a']) // undefined
虽然NaN不严格相等于自身，但 Map 将其视为同一个键。
Map 的键名有非字符串，这时可以选择转为数组 JSON
function mapToArrayJson(map) {
  return JSON.stringify([...map]);
}
let myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);
mapToArrayJson(myMap)
// '[[true,7],[{"foo":3},["abc"]]]'

WeakMap
WeakMap与Map的区别有两点。

首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。
一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用WeakMap结构。当该 DOM 元素被清除，其所对应的WeakMap记录就会自动被移除。
可以通过nodejs的process.memoryUsage()看是否回收

介绍下深度优先遍历和广度优先遍历,如何实现?
深度优先遍历
深度优先遍历DFS 与树的先序遍历比较类似。
假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。
递归
let deepTraversal1 = (node, nodeList = []) => {
  if (node !== null) {
    nodeList.push(node)
    let children = node.children
    for (let i = 0; i < children.length; i++) {
      deepTraversal1(children[i], nodeList)
    }
  }
  return nodeList
}
非递归
let deepTraversal3 = (node) => {
  let stack = []
  let nodes = []
  if (node) {
    // 推入当前处理的node
    stack.push(node)
    while (stack.length) {
      let item = stack.pop()
      let children = item.children
      nodes.push(item)
      for (let i = children.length - 1; i >= 0; i--) {
      //注意，这里想节点输出顺序是从左往右，所以遍历顺序要从右往左入栈
        stack.push(children[i])
         //堆栈，后进先出
      }
    }
  }
  return nodes
}
广度优先遍历 BFS
从图中某顶点v出发，在访问了v之后依次访问v的各个未曾访问过的邻接点，然后分别从这些邻接点出发依次访问它们的邻接点，并使得“先被访问的顶点的邻接点先于后被访问的顶点的邻接点被访问，直至图中所有已被访问的顶点的邻接点都被访问到。 如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问过的顶点作为新的起始点，重复上述过程，直至图中所有顶点都被访问到为止。
 let widthTraversal = (node) => {
            let nodes = []
            let queue = []
            if (node) {
                queue.push(node)
                while (queue.length) {
                    let item = queue.shift()
                    nodes.push(item)
                    // 队列，先进先出
                    let children = item.children
                    for (let i = 0; i < children.length; i++) {
                        queue.push(children[i])
                    }
                }
            }
            return nodes
        }
